# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.service import Service
from csv import DictWriter

# from bs4 import BeautifulSoup
# from selenium.webdriver.firefox.firefox_binary import FirefoxBinary

class TestNewtest():
  def setup_method(self, method):
    # PATH = Service("/c/Users/Christian/ckoled/test/chromedriver.exe")  ##constant file path of Chrome driver

    options = webdriver.ChromeOptions()  # Initializing Chrome Options from the Webdriver
    options.add_experimental_option("useAutomationExtension", False)  # Adding Argument to Not Use Automation Extension
    options.add_experimental_option("excludeSwitches", ["enable-automation"])  # Excluding enable-automation Switch
    options.add_argument("disable-popup-blocking")
    options.add_argument("disable-notifications")
    options.add_argument("disable-gpu")  ##renderer timeout
    userAgent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36'

    # options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument(f'user-agent={userAgent}')
      
    self.driver = webdriver.Chrome(options=options)
    # self.driver.implicitly_wait(10)
    self.vars = {}

  def teardown_method(self, method):
    self.driver.quit()

  def test_newtest(self, inputs):
    self.driver.get("https://www.cleverbot.com/")
    self.driver.set_window_size(935, 1104)
    self.driver.find_element(By.CSS_SELECTOR, "#noteb input").click()
    # self.driver.find_element(By.ID, "actionsicon").click()
    # self.driver.find_element(By.ID, "actionsnew").click()
    # self.driver.find_element(By.CSS_SELECTOR, "#noteb input").click()
    time.sleep(2)
    i = 0
    for input in inputs:
      self.driver.find_element(By.NAME, "stimulus").send_keys(input)
      self.driver.find_element(By.NAME, "stimulus").send_keys(Keys.ENTER)
      time.sleep(4)
      inc = {
      'id': i,
      'input': input,
      'response': self.driver.find_element(By.CSS_SELECTOR, "#line1 > .bot").text,
      }
      self.vars[str(i)] = inc
      i += 1

  # def getResult(self):
  #   time.sleep(2)
  #   soup = BeautifulSoup(self.driver.page_source, "lxml")
  #   responses = soup.find_all("span", class_="bot")
  #   responses_list = []
  #   for response in responses:
  #     res = response.text.strip()
  #     responses_list.append(res)
  #   return responses_list

if __name__ == "__main__":
    test = TestNewtest()
    test.setup_method("")
    test.test_newtest(['hi', 'bye'])
    # results = test.getResult()
    print(test.vars.values())
    headers = ['id','input','response']

    with open('output.csv', 'a', newline='\n') as f_object:
        obj = DictWriter(f_object, fieldnames=headers)
        for i in test.vars.values():
            obj.writerow(i)
        f_object.close()
    test.teardown_method("")
